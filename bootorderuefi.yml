- name: Manage VM Boot Firmware and Boot Order on ESXi
  hosts: localhost
  connection: local
  gather_facts: no

  collections:
    - community.vmware

  vars:
    exsi_hostname: "192.168.253.128"
    exsi_username: "root"
    exsi_password: "admin$22"
    validate_certs: false
    vm_list:
     - vm_name: "{{ vm_name }}"
       vm_ip: "{{ vm_ip }}"  # Pass via Tower survey

  tasks:

    - name: Set VM firmware to EFI (UEFI)
      vmware_guest_boot_manager:
        hostname: "{{ exsi_hostname }}"
        username: "{{ exsi_username }}"
        password: "{{ exsi_password }}"
        validate_certs: "{{ validate_certs }}"
        name: "{{ item.vm_name }}"
        boot_firmware: "efi"
      loop: "{{ vm_list }}"

    - name: Set boot order to PXE first (ethernet → disk)
      vmware_guest_boot_manager:
        hostname: "{{ exsi_hostname }}"
        username: "{{ exsi_username }}"
        password: "{{ exsi_password }}"
        validate_certs: "{{ validate_certs }}"
        name: "{{ item.vm_name }}"
        boot_order:
          - ethernet
          - disk
        enter_bios_setup: false
        boot_retry_enabled: false
        boot_delay: 0
      loop: "{{ vm_list }}"

    - name: Power on VM
      vmware_guest:
        hostname: "{{ exsi_hostname }}"
        username: "{{ exsi_username }}"
        password: "{{ exsi_password }}"
        validate_certs: "{{ validate_certs }}"
        name: "{{ item.vm_name }}"
        state: poweredon
      loop: "{{ vm_list }}"

    - name: Switch boot order to disk first (disk → ethernet)
      vmware_guest_boot_manager:
        hostname: "{{ exsi_hostname }}"
        username: "{{ exsi_username }}"
        password: "{{ exsi_password }}"
        validate_certs: "{{ validate_certs }}"
        name: "{{ item.vm_name }}"
        boot_order:
          - disk
          - ethernet
        enter_bios_setup: false
        boot_retry_enabled: false
        boot_delay: 0
      loop: "{{ vm_list }}"

    - name: Wait for VM to respond to SSH (port 22)
      wait_for:
        host: "{{ item.vm_ip }}"
        port: 22
        delay: 10
        timeout: 3600  # 30 minutes max
        state: started
      loop: "{{ vm_list }}"
      delegate_to: localhost

    - name: Remove old SSH host key from known_hosts
      shell: ssh-keygen -R {{ item.vm_ip }} || true
      loop: "{{ vm_list }}"
      delegate_to: localhost

    - name: Accept new SSH host key
      shell: ssh-keyscan -H {{ item.vm_ip }} >> /tmp/known_hosts
      args:
       executable: /bin/bash
      loop: "{{ vm_list }}"
      delegate_to: localhost

- name: Check kernel version of new OS
  hosts: localhost
  gather_facts: no
  vars:
   ansible_ssh_common_args: "-o UserKnownHostsFile=/tmp/known_hosts -o StrictHostKeyChecking=no"
  tasks:

    - name: Check kernel version via SSH
      command: uname -r
      register: kernel_version
      delegate_to: "{{ item.vm_ip }}"
      loop: "{{ vm_list }}"

    - name: Display kernel version
      debug:
        msg: "Kernel version on {{ item.vm_name }} ({{ item.vm_ip }}) is {{ kernel_version.results[loop.index0].stdout }}"
      loop: "{{ vm_list }}"
      loop_control:
      index_var: loop_index
